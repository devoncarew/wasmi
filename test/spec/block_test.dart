// Generated from spec/test/core/block.wast.

// ignore_for_file: unused_import, unused_local_variable

import 'dart:io';

import 'package:test/test.dart';
import 'package:wasmi/execute.dart';
import 'package:wasmi/parse.dart';

import '../framework.dart';

void main() {
  final Map<String, ImportModule> registered = {};
  final Map<String, Module> named = {};

  group('block.0.wasm', () {
    late ModuleDefinition def;
    late Module m;

    setUpAll(() {
      def = ModuleDefinition.parse(File('test/spec/block/block.0.wasm'));
      m = Module(def, imports: {'spectest': specTestModule(), ...registered});
    });

    returns('empty_0', () => m.$('empty', []), null /*void*/);
    returns('singular_0', () => m.$('singular', []), 7);
    returns('multi_0', () => m.$('multi', []), 8);
    returns('nested_0', () => m.$('nested', []), 9);
    returns('deep_0', () => m.$('deep', []), 0x96);
    returns('as_select_first_0', () => m.$('as-select-first', []), 1);
    returns('as_select_mid_0', () => m.$('as-select-mid', []), 2);
    returns('as_select_last_0', () => m.$('as-select-last', []), 2);
    returns('as_loop_first_0', () => m.$('as-loop-first', []), 1);
    returns('as_loop_mid_0', () => m.$('as-loop-mid', []), 1);
    returns('as_loop_last_0', () => m.$('as-loop-last', []), 1);
    returns(
        'as_if_condition_0', () => m.$('as-if-condition', []), null /*void*/);
    returns('as_if_then_0', () => m.$('as-if-then', []), 1);
    returns('as_if_else_0', () => m.$('as-if-else', []), 2);
    returns('as_br_if_first_0', () => m.$('as-br_if-first', []), 1);
    returns('as_br_if_last_0', () => m.$('as-br_if-last', []), 2);
    returns('as_br_table_first_0', () => m.$('as-br_table-first', []), 1);
    returns('as_br_table_last_0', () => m.$('as-br_table-last', []), 2);
    returns(
        'as_call_indirect_first_0', () => m.$('as-call_indirect-first', []), 1);
    returns('as_call_indirect_mid_0', () => m.$('as-call_indirect-mid', []), 2);
    returns(
        'as_call_indirect_last_0', () => m.$('as-call_indirect-last', []), 1);
    returns('as_store_first_0', () => m.$('as-store-first', []), null /*void*/);
    returns('as_store_last_0', () => m.$('as-store-last', []), null /*void*/);
    returns('as_memory_grow_value_0', () => m.$('as-memory.grow-value', []), 1);
    returns('as_call_value_0', () => m.$('as-call-value', []), 1);
    returns('as_return_value_0', () => m.$('as-return-value', []), 1);
    returns(
        'as_drop_operand_0', () => m.$('as-drop-operand', []), null /*void*/);
    returns('as_br_value_0', () => m.$('as-br-value', []), 1);
    returns('as_local_set_value_0', () => m.$('as-local.set-value', []), 1);
    returns('as_local_tee_value_0', () => m.$('as-local.tee-value', []), 1);
    returns('as_global_set_value_0', () => m.$('as-global.set-value', []), 1);
    returns('as_load_operand_0', () => m.$('as-load-operand', []), 1);
    returns('as_unary_operand_0', () => m.$('as-unary-operand', []), 0);
    returns('as_binary_operand_0', () => m.$('as-binary-operand', []), 0xC);
    returns('as_test_operand_0', () => m.$('as-test-operand', []), 0);
    returns('as_compare_operand_0', () => m.$('as-compare-operand', []), 0);
    returns('as_binary_operands_0', () => m.$('as-binary-operands', []), 0xC);
    returns('as_compare_operands_0', () => m.$('as-compare-operands', []), 0);
    returns('as_mixed_operands_0', () => m.$('as-mixed-operands', []), 0x1B);
    returns('break_bare_0', () => m.$('break-bare', []), 0x13);
    returns('break_value_0', () => m.$('break-value', []), 0x12);
    returns('break_multi_value_0', () => m.$('break-multi-value', []),
        [0x12, $i32('FFFFFFEE'), 0x12]);
    returns('break_repeated_0', () => m.$('break-repeated', []), 0x12);
    returns('break_inner_0', () => m.$('break-inner', []), 0xF);
    returns('param_0', () => m.$('param', []), 3);
    returns('params_0', () => m.$('params', []), 3);
    returns('params_id_0', () => m.$('params-id', []), 3);
    returns('param_break_0', () => m.$('param-break', []), 3);
    returns('params_break_0', () => m.$('params-break', []), 3);
    returns('params_id_break_0', () => m.$('params-id-break', []), 3);
    returns('effects_0', () => m.$('effects', []), 1);
    returns('type_use_0', () => m.$('type-use', []), null /*void*/);
  });

  // assertMalformed('malformed block.1.wat');
  // assertMalformed('malformed block.2.wat');
  // assertMalformed('malformed block.3.wat');
  // assertMalformed('malformed block.4.wat');
  // assertMalformed('malformed block.5.wat');
  // assertMalformed('malformed block.6.wat');
  // assertMalformed('malformed block.7.wat');
  // assertMalformed('malformed block.8.wat');
  // assertMalformed('malformed block.9.wat');
  // assertMalformed('malformed block.10.wat');
  // assertMalformed('malformed block.11.wat');
  // assertInvalid('invalid block.12.wasm', 'block/block.12.wasm', 'type mismatch');
  // assertInvalid('invalid block.13.wasm', 'block/block.13.wasm', 'type mismatch');
  // assertInvalid('invalid block.14.wasm', 'block/block.14.wasm', 'type mismatch');
  // assertInvalid('invalid block.15.wasm', 'block/block.15.wasm', 'type mismatch');
  // assertInvalid('invalid block.16.wasm', 'block/block.16.wasm', 'type mismatch');
  // assertInvalid('invalid block.17.wasm', 'block/block.17.wasm', 'type mismatch');
  // assertInvalid('invalid block.18.wasm', 'block/block.18.wasm', 'type mismatch');
  // assertInvalid('invalid block.19.wasm', 'block/block.19.wasm', 'type mismatch');
  // assertInvalid('invalid block.20.wasm', 'block/block.20.wasm', 'type mismatch');
  // assertInvalid('invalid block.21.wasm', 'block/block.21.wasm', 'type mismatch');
  // assertInvalid('invalid block.22.wasm', 'block/block.22.wasm', 'type mismatch');
  // assertInvalid('invalid block.23.wasm', 'block/block.23.wasm', 'type mismatch');
  // assertInvalid('invalid block.24.wasm', 'block/block.24.wasm', 'type mismatch');
  // assertInvalid('invalid block.25.wasm', 'block/block.25.wasm', 'type mismatch');
  // assertInvalid('invalid block.26.wasm', 'block/block.26.wasm', 'type mismatch');
  // assertInvalid('invalid block.27.wasm', 'block/block.27.wasm', 'type mismatch');
  // assertInvalid('invalid block.28.wasm', 'block/block.28.wasm', 'type mismatch');
  // assertInvalid('invalid block.29.wasm', 'block/block.29.wasm', 'type mismatch');
  // assertInvalid('invalid block.30.wasm', 'block/block.30.wasm', 'type mismatch');
  // assertInvalid('invalid block.31.wasm', 'block/block.31.wasm', 'type mismatch');
  // assertInvalid('invalid block.32.wasm', 'block/block.32.wasm', 'type mismatch');
  // assertInvalid('invalid block.33.wasm', 'block/block.33.wasm', 'type mismatch');
  // assertInvalid('invalid block.34.wasm', 'block/block.34.wasm', 'type mismatch');
  // assertInvalid('invalid block.35.wasm', 'block/block.35.wasm', 'type mismatch');
  // assertInvalid('invalid block.36.wasm', 'block/block.36.wasm', 'type mismatch');
  // assertInvalid('invalid block.37.wasm', 'block/block.37.wasm', 'type mismatch');
  // assertInvalid('invalid block.38.wasm', 'block/block.38.wasm', 'type mismatch');
  // assertInvalid('invalid block.39.wasm', 'block/block.39.wasm', 'type mismatch');
  // assertInvalid('invalid block.40.wasm', 'block/block.40.wasm', 'type mismatch');
  // assertInvalid('invalid block.41.wasm', 'block/block.41.wasm', 'type mismatch');
  // assertInvalid('invalid block.42.wasm', 'block/block.42.wasm', 'type mismatch');
  // assertInvalid('invalid block.43.wasm', 'block/block.43.wasm', 'type mismatch');
  // assertInvalid('invalid block.44.wasm', 'block/block.44.wasm', 'type mismatch');
  // assertInvalid('invalid block.45.wasm', 'block/block.45.wasm', 'type mismatch');
  // assertInvalid('invalid block.46.wasm', 'block/block.46.wasm', 'type mismatch');
  // assertInvalid('invalid block.47.wasm', 'block/block.47.wasm', 'type mismatch');
  // assertInvalid('invalid block.48.wasm', 'block/block.48.wasm', 'type mismatch');
  // assertInvalid('invalid block.49.wasm', 'block/block.49.wasm', 'type mismatch');
  // assertInvalid('invalid block.50.wasm', 'block/block.50.wasm', 'type mismatch');
  // assertInvalid('invalid block.51.wasm', 'block/block.51.wasm', 'type mismatch');
  // assertInvalid('invalid block.52.wasm', 'block/block.52.wasm', 'type mismatch');
  // assertInvalid('invalid block.53.wasm', 'block/block.53.wasm', 'type mismatch');
  // assertInvalid('invalid block.54.wasm', 'block/block.54.wasm', 'type mismatch');
  // assertInvalid('invalid block.55.wasm', 'block/block.55.wasm', 'type mismatch');
  // assertInvalid('invalid block.56.wasm', 'block/block.56.wasm', 'type mismatch');
  // assertInvalid('invalid block.57.wasm', 'block/block.57.wasm', 'type mismatch');
  // assertInvalid('invalid block.58.wasm', 'block/block.58.wasm', 'type mismatch');
  // assertInvalid('invalid block.59.wasm', 'block/block.59.wasm', 'type mismatch');
  // assertInvalid('invalid block.60.wasm', 'block/block.60.wasm', 'type mismatch');
  // assertInvalid('invalid block.61.wasm', 'block/block.61.wasm', 'type mismatch');
  // assertInvalid('invalid block.62.wasm', 'block/block.62.wasm', 'type mismatch');
  // assertInvalid('invalid block.63.wasm', 'block/block.63.wasm', 'type mismatch');
  // assertInvalid('invalid block.64.wasm', 'block/block.64.wasm', 'type mismatch');
  // assertInvalid('invalid block.65.wasm', 'block/block.65.wasm', 'type mismatch');
  // assertInvalid('invalid block.66.wasm', 'block/block.66.wasm', 'type mismatch');
  // assertInvalid('invalid block.67.wasm', 'block/block.67.wasm', 'type mismatch');
  // assertInvalid('invalid block.68.wasm', 'block/block.68.wasm', 'type mismatch');
  // assertInvalid('invalid block.69.wasm', 'block/block.69.wasm', 'type mismatch');
  // assertInvalid('invalid block.70.wasm', 'block/block.70.wasm', 'type mismatch');
  // assertInvalid('invalid block.71.wasm', 'block/block.71.wasm', 'type mismatch');
  // assertInvalid('invalid block.72.wasm', 'block/block.72.wasm', 'type mismatch');
  // assertInvalid('invalid block.73.wasm', 'block/block.73.wasm', 'type mismatch');
  // assertInvalid('invalid block.74.wasm', 'block/block.74.wasm', 'type mismatch');
  // assertInvalid('invalid block.75.wasm', 'block/block.75.wasm', 'type mismatch');
  // assertInvalid('invalid block.76.wasm', 'block/block.76.wasm', 'type mismatch');
  // assertInvalid('invalid block.77.wasm', 'block/block.77.wasm', 'type mismatch');
  // assertInvalid('invalid block.78.wasm', 'block/block.78.wasm', 'type mismatch');
  // assertInvalid('invalid block.79.wasm', 'block/block.79.wasm', 'type mismatch');
  // assertInvalid('invalid block.80.wasm', 'block/block.80.wasm', 'type mismatch');
  // assertInvalid('invalid block.81.wasm', 'block/block.81.wasm', 'type mismatch');
  // assertInvalid('invalid block.82.wasm', 'block/block.82.wasm', 'type mismatch');
  // assertInvalid('invalid block.83.wasm', 'block/block.83.wasm', 'type mismatch');
  // assertInvalid('invalid block.84.wasm', 'block/block.84.wasm', 'type mismatch');
  // assertInvalid('invalid block.85.wasm', 'block/block.85.wasm', 'type mismatch');
  // assertInvalid('invalid block.86.wasm', 'block/block.86.wasm', 'type mismatch');
  // assertInvalid('invalid block.87.wasm', 'block/block.87.wasm', 'type mismatch');
  // assertInvalid('invalid block.88.wasm', 'block/block.88.wasm', 'type mismatch');
  // assertInvalid('invalid block.89.wasm', 'block/block.89.wasm', 'type mismatch');
  // assertInvalid('invalid block.90.wasm', 'block/block.90.wasm', 'type mismatch');
  // assertInvalid('invalid block.91.wasm', 'block/block.91.wasm', 'type mismatch');
  // assertInvalid('invalid block.92.wasm', 'block/block.92.wasm', 'type mismatch');
  // assertInvalid('invalid block.93.wasm', 'block/block.93.wasm', 'type mismatch');
  // assertInvalid('invalid block.94.wasm', 'block/block.94.wasm', 'type mismatch');
  // assertInvalid('invalid block.95.wasm', 'block/block.95.wasm', 'type mismatch');
  // assertInvalid('invalid block.96.wasm', 'block/block.96.wasm', 'type mismatch');
  // assertInvalid('invalid block.97.wasm', 'block/block.97.wasm', 'type mismatch');
  // assertInvalid('invalid block.98.wasm', 'block/block.98.wasm', 'type mismatch');
  // assertInvalid('invalid block.99.wasm', 'block/block.99.wasm', 'type mismatch');
  // assertInvalid('invalid block.100.wasm', 'block/block.100.wasm', 'type mismatch');
  // assertInvalid('invalid block.101.wasm', 'block/block.101.wasm', 'type mismatch');
  // assertInvalid('invalid block.102.wasm', 'block/block.102.wasm', 'type mismatch');
  // assertInvalid('invalid block.103.wasm', 'block/block.103.wasm', 'type mismatch');
  // assertInvalid('invalid block.104.wasm', 'block/block.104.wasm', 'type mismatch');
  // assertInvalid('invalid block.105.wasm', 'block/block.105.wasm', 'type mismatch');
  // assertInvalid('invalid block.106.wasm', 'block/block.106.wasm', 'type mismatch');
  // assertInvalid('invalid block.107.wasm', 'block/block.107.wasm', 'type mismatch');
  // assertInvalid('invalid block.108.wasm', 'block/block.108.wasm', 'type mismatch');
  // assertInvalid('invalid block.109.wasm', 'block/block.109.wasm', 'type mismatch');
  // assertInvalid('invalid block.110.wasm', 'block/block.110.wasm', 'type mismatch');
  // assertInvalid('invalid block.111.wasm', 'block/block.111.wasm', 'type mismatch');
  // assertInvalid('invalid block.112.wasm', 'block/block.112.wasm', 'type mismatch');
  // assertInvalid('invalid block.113.wasm', 'block/block.113.wasm', 'type mismatch');
  // assertInvalid('invalid block.114.wasm', 'block/block.114.wasm', 'type mismatch');
  // assertInvalid('invalid block.115.wasm', 'block/block.115.wasm', 'type mismatch');
  // assertInvalid('invalid block.116.wasm', 'block/block.116.wasm', 'type mismatch');
  // assertInvalid('invalid block.117.wasm', 'block/block.117.wasm', 'type mismatch');
  // assertInvalid('invalid block.118.wasm', 'block/block.118.wasm', 'type mismatch');
  // assertInvalid('invalid block.119.wasm', 'block/block.119.wasm', 'type mismatch');
  // assertInvalid('invalid block.120.wasm', 'block/block.120.wasm', 'type mismatch');
  // assertInvalid('invalid block.121.wasm', 'block/block.121.wasm', 'type mismatch');
  // assertInvalid('invalid block.122.wasm', 'block/block.122.wasm', 'type mismatch');
  // assertInvalid('invalid block.123.wasm', 'block/block.123.wasm', 'type mismatch');
  // assertInvalid('invalid block.124.wasm', 'block/block.124.wasm', 'type mismatch');
  // assertInvalid('invalid block.125.wasm', 'block/block.125.wasm', 'type mismatch');
  // assertInvalid('invalid block.126.wasm', 'block/block.126.wasm', 'type mismatch');
  // assertInvalid('invalid block.127.wasm', 'block/block.127.wasm', 'type mismatch');
  // assertInvalid('invalid block.128.wasm', 'block/block.128.wasm', 'type mismatch');
  // assertInvalid('invalid block.129.wasm', 'block/block.129.wasm', 'type mismatch');
  // assertInvalid('invalid block.130.wasm', 'block/block.130.wasm', 'type mismatch');
  // assertInvalid('invalid block.131.wasm', 'block/block.131.wasm', 'type mismatch');
  // assertInvalid('invalid block.132.wasm', 'block/block.132.wasm', 'type mismatch');
  // assertInvalid('invalid block.133.wasm', 'block/block.133.wasm', 'type mismatch');
  // assertInvalid('invalid block.134.wasm', 'block/block.134.wasm', 'type mismatch');
  // assertInvalid('invalid block.135.wasm', 'block/block.135.wasm', 'type mismatch');
  // assertInvalid('invalid block.136.wasm', 'block/block.136.wasm', 'type mismatch');
  // assertInvalid('invalid block.137.wasm', 'block/block.137.wasm', 'type mismatch');
  // assertInvalid('invalid block.138.wasm', 'block/block.138.wasm', 'type mismatch');
  // assertInvalid('invalid block.139.wasm', 'block/block.139.wasm', 'type mismatch');
  // assertInvalid('invalid block.140.wasm', 'block/block.140.wasm', 'type mismatch');
  // assertInvalid('invalid block.141.wasm', 'block/block.141.wasm', 'type mismatch');
  // assertInvalid('invalid block.142.wasm', 'block/block.142.wasm', 'type mismatch');
  // assertInvalid('invalid block.143.wasm', 'block/block.143.wasm', 'type mismatch');
  // assertInvalid('invalid block.144.wasm', 'block/block.144.wasm', 'type mismatch');
  // assertInvalid('invalid block.145.wasm', 'block/block.145.wasm', 'type mismatch');
  // assertInvalid('invalid block.146.wasm', 'block/block.146.wasm', 'type mismatch');
  // assertInvalid('invalid block.147.wasm', 'block/block.147.wasm', 'type mismatch');
  // assertInvalid('invalid block.148.wasm', 'block/block.148.wasm', 'type mismatch');
  // assertInvalid('invalid block.149.wasm', 'block/block.149.wasm', 'type mismatch');
  // assertInvalid('invalid block.150.wasm', 'block/block.150.wasm', 'type mismatch');
  // assertInvalid('invalid block.151.wasm', 'block/block.151.wasm', 'type mismatch');
  // assertInvalid('invalid block.152.wasm', 'block/block.152.wasm', 'type mismatch');
  // assertInvalid('invalid block.153.wasm', 'block/block.153.wasm', 'type mismatch');
  // assertInvalid('invalid block.154.wasm', 'block/block.154.wasm', 'type mismatch');
  // assertInvalid('invalid block.155.wasm', 'block/block.155.wasm', 'type mismatch');
  // assertInvalid('invalid block.156.wasm', 'block/block.156.wasm', 'type mismatch');
  // assertInvalid('invalid block.157.wasm', 'block/block.157.wasm', 'type mismatch');
  // assertInvalid('invalid block.158.wasm', 'block/block.158.wasm', 'type mismatch');
  // assertInvalid('invalid block.159.wasm', 'block/block.159.wasm', 'type mismatch');
  // assertInvalid('invalid block.160.wasm', 'block/block.160.wasm', 'type mismatch');
  // assertInvalid('invalid block.161.wasm', 'block/block.161.wasm', 'type mismatch');
  // assertInvalid('invalid block.162.wasm', 'block/block.162.wasm', 'type mismatch');
  // assertInvalid('invalid block.163.wasm', 'block/block.163.wasm', 'type mismatch');
  // assertInvalid('invalid block.164.wasm', 'block/block.164.wasm', 'type mismatch');
  // assertInvalid('invalid block.165.wasm', 'block/block.165.wasm', 'type mismatch');
  // assertInvalid('invalid block.166.wasm', 'block/block.166.wasm', 'type mismatch');
  // assertMalformed('malformed block.167.wat');
  // assertMalformed('malformed block.168.wat');
  // assertMalformed('malformed block.169.wat');
  // assertMalformed('malformed block.170.wat');
}
